#!/usr/bin/env python

from sentence_transformers import SentenceTransformer
from sklearn.metrics.pairwise import cosine_similarity
import time
import numpy as np

def compare_models():
    print("üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –º–æ–¥–µ–ª—ñ...")
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –æ–±–∏–¥–≤—ñ –º–æ–¥–µ–ª—ñ
    labse = SentenceTransformer('sentence-transformers/LaBSE')
    minilm = SentenceTransformer('sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2')
    
    print("‚úÖ –ú–æ–¥–µ–ª—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ!")
    
    # –¢–µ—Å—Ç–æ–≤—ñ —Ñ—Ä–∞–∑–∏ - –æ–¥–Ω–∞–∫–æ–≤—ñ –ø–æ–Ω—è—Ç—Ç—è —Ä—ñ–∑–Ω–∏–º–∏ –º–æ–≤–∞–º–∏
    test_pairs = [
        ("–ß–µ—Ä–≤–æ–Ω–∏–π –∞–≤—Ç–æ–º–æ–±—ñ–ª—å", "Red car"),           # —É–∫—Ä-–∞–Ω–≥–ª
        ("–ö—Ä–∞—Å–Ω–∞—è –º–∞—à–∏–Ω–∞", "Red car"),                # —Ä—É—Å-–∞–Ω–≥–ª  
        ("–ß–µ—Ä–≤–æ–Ω–∏–π –∞–≤—Ç–æ–º–æ–±—ñ–ª—å", "–ö—Ä–∞—Å–Ω–∞—è –º–∞—à–∏–Ω–∞"),    # —É–∫—Ä-—Ä—É—Å
        ("–°–∏–Ω—ñ–π –±—É–¥–∏–Ω–æ–∫", "Blue house"),              # —É–∫—Ä-–∞–Ω–≥–ª
        ("–ó–µ–ª–µ–Ω–∏–π —Å—Ç—ñ–ª", "Green table"),             # —É–∫—Ä-–∞–Ω–≥–ª
        ("–ß–æ—Ä–Ω–∏–π –∫—ñ—Ç", "Black cat"),                 # —É–∫—Ä-–∞–Ω–≥–ª
    ]
    
    # –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ç–µ—Å—Ç–∏ –¥–ª—è –æ–¥–Ω—ñ—î—ó –º–æ–≤–∏
    same_language_pairs = [
        ("–ß–µ—Ä–≤–æ–Ω–∏–π –∞–≤—Ç–æ–º–æ–±—ñ–ª—å", "–ê–≤—Ç–æ–º–æ–±—ñ–ª—å —á–µ—Ä–≤–æ–Ω–æ–≥–æ –∫–æ–ª—å–æ—Ä—É"),  # –ø–∞—Ä–∞—Ñ—Ä–∞–∑ —É–∫—Ä
        ("Red car", "Automobile that is red"),                    # –ø–∞—Ä–∞—Ñ—Ä–∞–∑ –∞–Ω–≥–ª
        ("–í–µ–ª–∏–∫–∏–π –±—É–¥–∏–Ω–æ–∫", "–ú–∞–ª–µ–Ω—å–∫–∏–π –±—É–¥–∏–Ω–æ–∫"),                # –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω–æ—Å—Ç—ñ —É–∫—Ä
    ]
    
    print("\n" + "="*60)
    print("üéØ –¢–ï–°–¢ –ú–Ü–ñ–ú–û–í–ù–û–á –ü–û–î–Ü–ë–ù–û–°–¢–Ü")
    print("="*60)
    
    labse_scores = []
    minilm_scores = []
    
    for text1, text2 in test_pairs:
        # LaBSE
        emb1_labse = labse.encode([text1, text2])
        sim_labse = cosine_similarity([emb1_labse[0]], [emb1_labse[1]])[0][0]
        labse_scores.append(sim_labse)
        
        # MiniLM
        emb1_minilm = minilm.encode([text1, text2])
        sim_minilm = cosine_similarity([emb1_minilm[0]], [emb1_minilm[1]])[0][0]
        minilm_scores.append(sim_minilm)
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–µ—Ä–µ–º–æ–∂—Ü—è
        winner = "üèÜ LaBSE" if sim_labse > sim_minilm else "üèÜ MiniLM" if sim_minilm > sim_labse else "ü§ù –ù—ñ—á–∏—è"
        diff = abs(sim_labse - sim_minilm)
        
        print(f"\nüìù '{text1}' ‚Üî '{text2}'")
        print(f"   LaBSE:  {sim_labse:.3f}")
        print(f"   MiniLM: {sim_minilm:.3f}")
        print(f"   {winner} (—Ä—ñ–∑–Ω–∏—Ü—è: {diff:.3f})")
    
    print(f"\nüìä –°–ï–†–ï–î–ù–Ü –ü–û–ö–ê–ó–ù–ò–ö–ò –º—ñ–∂–º–æ–≤–Ω–æ—ó –ø–æ–¥—ñ–±–Ω–æ—Å—Ç—ñ:")
    print(f"   LaBSE:  {np.mean(labse_scores):.3f}")
    print(f"   MiniLM: {np.mean(minilm_scores):.3f}")
    
    # –¢–µ—Å—Ç –æ–¥–Ω—ñ—î—ó –º–æ–≤–∏
    print("\n" + "="*60)
    print("üè† –¢–ï–°–¢ –û–î–ù–Ü–Ñ–á –ú–û–í–ò (–ø–∞—Ä–∞—Ñ—Ä–∞–∑–∏)")
    print("="*60)
    
    for text1, text2 in same_language_pairs:
        emb1_labse = labse.encode([text1, text2])
        sim_labse = cosine_similarity([emb1_labse[0]], [emb1_labse[1]])[0][0]
        
        emb1_minilm = minilm.encode([text1, text2])
        sim_minilm = cosine_similarity([emb1_minilm[0]], [emb1_minilm[1]])[0][0]
        
        winner = "üèÜ LaBSE" if sim_labse > sim_minilm else "üèÜ MiniLM" if sim_minilm > sim_labse else "ü§ù –ù—ñ—á–∏—è"
        
        print(f"\nüìù '{text1}' ‚Üî '{text2}'")
        print(f"   LaBSE:  {sim_labse:.3f}")
        print(f"   MiniLM: {sim_minilm:.3f}")
        print(f"   {winner}")
    
    # –¢–µ—Å—Ç —à–≤–∏–¥–∫–æ—Å—Ç—ñ
    print("\n" + "="*60)
    print("‚ö° –¢–ï–°–¢ –®–í–ò–î–ö–û–°–¢–Ü")
    print("="*60)
    
    test_texts = [
        "–ß–µ—Ä–≤–æ–Ω–∏–π –∞–≤—Ç–æ–º–æ–±—ñ–ª—å", "Red car", "–ö—Ä–∞—Å–Ω–∞—è –º–∞—à–∏–Ω–∞",
        "–°–∏–Ω—ñ–π –±—É–¥–∏–Ω–æ–∫", "Blue house", "–ó–µ–ª–µ–Ω–∏–π —Å—Ç—ñ–ª", "Green table"
    ] * 10  # 70 —Ç–µ–∫—Å—Ç—ñ–≤
    
    # LaBSE —à–≤–∏–¥–∫—ñ—Å—Ç—å
    start_time = time.time()
    labse_embeddings = labse.encode(test_texts)
    labse_time = time.time() - start_time
    
    # MiniLM —à–≤–∏–¥–∫—ñ—Å—Ç—å  
    start_time = time.time()
    minilm_embeddings = minilm.encode(test_texts)
    minilm_time = time.time() - start_time
    
    print(f"üêå LaBSE:  {labse_time:.2f}s ({len(test_texts)} —Ç–µ–∫—Å—Ç—ñ–≤)")
    print(f"‚ö° MiniLM: {minilm_time:.2f}s ({len(test_texts)} —Ç–µ–∫—Å—Ç—ñ–≤)")
    print(f"üìà MiniLM —à–≤–∏–¥—à–∞ –≤ {labse_time/minilm_time:.1f}x —Ä–∞–∑—ñ–≤")
    
    # –†–æ–∑–º—ñ—Ä–∏ –≤–µ–∫—Ç–æ—Ä—ñ–≤
    print(f"\nüìê –†–û–ó–ú–Ü–†–ò –í–ï–ö–¢–û–†–Ü–í:")
    print(f"   LaBSE:  {labse_embeddings.shape[1]} –≤–∏–º—ñ—Ä—ñ–≤")
    print(f"   MiniLM: {minilm_embeddings.shape[1]} –≤–∏–º—ñ—Ä—ñ–≤")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
    print("\n" + "="*60)
    print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á")
    print("="*60)
    
    avg_labse = np.mean(labse_scores)
    avg_minilm = np.mean(minilm_scores)
    
    if avg_labse > avg_minilm + 0.05:  # —Å—É—Ç—Ç—î–≤–∞ —Ä—ñ–∑–Ω–∏—Ü—è
        print("üéØ –î–ª—è –≤–∞—à–æ–≥–æ –≤–∏–ø–∞–¥–∫—É (—É–∫—Ä/—Ä—É—Å/–∞–Ω–≥–ª –º—ñ–∂–º–æ–≤–Ω–∏–π –ø–æ—à—É–∫):")
        print("   ‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É—é LaBSE - –∑–Ω–∞—á–Ω–æ –∫—Ä–∞—â–∞ –º—ñ–∂–º–æ–≤–Ω–∞ –ø–æ–¥—ñ–±–Ω—ñ—Å—Ç—å")
        print("   ‚ö†Ô∏è  –ë—É–¥–µ –ø–æ–≤—ñ–ª—å–Ω—ñ—à–∞, –∞–ª–µ —Ç–æ—á–Ω—ñ—à–∞ –¥–ª—è cross-lingual –ø–æ—à—É–∫—É")
    else:
        print("ü§î –î–ª—è –≤–∞—à–æ–≥–æ –≤–∏–ø–∞–¥–∫—É:")
        print("   ‚úÖ MiniLM –º–æ–∂–µ –±—É—Ç–∏ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ—é - —à–≤–∏–¥—à–∞ —ñ –∫–æ–º–ø–∞–∫—Ç–Ω—ñ—à–∞")
        print("   ‚úÖ LaBSE - —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Ç–æ—á–Ω—ñ—Å—Ç—å –º—ñ–∂–º–æ–≤–Ω–æ–≥–æ –ø–æ—à—É–∫—É")

if __name__ == "__main__":
    compare_models()