"""
üåê –ö–ª—ñ—î–Ω—Ç –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ vLLM OpenAI-compatible API
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –æ—Ñ—ñ—Ü—ñ–π–Ω—É openai –±—ñ–±–ª—ñ–æ—Ç–µ–∫—É –¥–ª—è summarization
"""

import time
from dataclasses import dataclass
from typing import Dict, List, Optional

from openai import OpenAI

from common import news_headlines, texts


@dataclass
class SummarizationConfig:
    """–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ summarization"""
    temperature: float
    top_p: float
    max_tokens: int
    presence_penalty: float
    frequency_penalty: float
    stop: Optional[List[str]] = None


# üéØ –ì–æ—Ç–æ–≤—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
CONFIGS = {
    "precise": SummarizationConfig(
        temperature=0.2,
        top_p=0.85,
        max_tokens=200,
        presence_penalty=0.6,
        frequency_penalty=0.4,
        # stop=["</summary>", "\n\n\n", "–¢–µ–∫—Å—Ç:"]
    ),
    "balanced": SummarizationConfig(
        temperature=0.5,
        top_p=0.9,
        max_tokens=4196,
        presence_penalty=0.5,
        frequency_penalty=0.3,
        # stop=["</summary>", "\n\n\n"]
    ),
    "creative": SummarizationConfig(
        temperature=0.8,
        top_p=0.95,
        max_tokens=600,
        presence_penalty=0.3,
        frequency_penalty=0.2,
        # stop=["</summary>", "\n\n\n"]
    ),
}


class VLLMSummarizerClient:
    """
    –ö–ª—ñ—î–Ω—Ç –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ vLLM API –¥–ª—è summarization
    """

    def __init__(
        self,
        base_url: str = "http://localhost:8000/v1",
        api_key: str = "EMPTY",  # vLLM –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –Ω–µ –ø–æ—Ç—Ä–µ–±—É—î –∫–ª—é—á–∞
        model: str = "google/gemma-3-4b-it"
    ):
        """
        Args:
            base_url: URL vLLM —Å–µ—Ä–≤–µ—Ä–∞
            api_key: API –∫–ª—é—á (—è–∫—â–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ)
            model: –ù–∞–∑–≤–∞ –º–æ–¥–µ–ª—ñ
        """
        self.client = OpenAI(
            base_url=base_url,
            api_key=api_key,
        )
        self.model = model

    def create_chat_messages(
        self,
        text: str,
        custom_instruction: Optional[str] = None
    ) -> List[Dict]:
        """
        –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è chat API
        """
        default_instruction = """–¢–∏ ‚Äî —Å–∏—Å—Ç–µ–º–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–∏—Å–ª–∏—Ö –Ω–æ–≤–∏–Ω–Ω–∏—Ö —Ä–µ–∑—é–º–µ.
–û—Ç—Ä–∏–º—É—î—à —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—Ç—ñ –∑ –Ω–æ–≤–∏–Ω–Ω–æ–≥–æ –¥–∂–µ—Ä–µ–ª–∞ –±—É–¥—å-—è–∫–æ—é –º–æ–≤–æ—é.
–¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è ‚Äî –ø—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ –∫–æ—Ä–æ—Ç–∫–µ —Ä–µ–∑—é–º–µ **—É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é** (3‚Äì5 —Ä–µ—á–µ–Ω—å), –¥–æ—Ç—Ä–∏–º—É—é—á–∏—Å—å —Ç–∞–∫–∏—Ö –ø—Ä–∞–≤–∏–ª:
1. **–ü–µ—Ä–µ–¥–∞–π –≥–æ–ª–æ–≤–Ω–∏–π –∑–º—ñ—Å—Ç —Ç–æ—á–Ω–æ –π —Å—Ç–∏—Å–ª–æ** ‚Äî –∑–æ—Å–µ—Ä–µ–¥—å—Å—è –Ω–∞ –∫–ª—é—á–æ–≤–∏—Ö —Ñ–∞–∫—Ç–∞—Ö, –ø–æ–¥—ñ—è—Ö —ñ —Ç–µ–∑–∞—Ö.
2. –Ø–∫—â–æ –≤ —Ç–µ–∫—Å—Ç—ñ —î —Ü—ñ –¥–∞–Ω—ñ, **–∑–∞–∑–Ω–∞—á –æ—Å–Ω–æ–≤–Ω–∏—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤, –º—ñ—Å—Ü–µ, —á–∞—Å —ñ –ø—Ä–∏—á–∏–Ω—É –ø–æ–¥—ñ—ó.**
3. **–£–Ω–∏–∫–∞–π** –¥—Ä—É–≥–æ—Ä—è–¥–Ω–∏—Ö –¥–µ—Ç–∞–ª–µ–π, –ø—Ä–∏–∫–ª–∞–¥—ñ–≤, —Ü–∏—Ç–∞—Ç, –æ—Ü—ñ–Ω–Ω–∏—Ö —Å—É–¥–∂–µ–Ω—å —ñ –µ–º–æ—Ü—ñ–π–Ω–æ–≥–æ —Ç–æ–Ω—É.
4. –î–æ—Ç—Ä–∏–º—É–π—Å—è **–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–≥–æ, –æ–±‚Äô—î–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–∏–ª—é.**
5. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π **–ø—Ä–∏—Ä–æ–¥–Ω—É, –∑—Ä–æ–∑—É–º—ñ–ª—É –π –≥—Ä–∞–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—É** —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –º–æ–≤—É.
6. **–£ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø–æ–¥–∞–π –ª–∏—à–µ —Ä–µ–∑—é–º–µ** ‚Äî –±–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤, –ø–æ—è—Å–Ω–µ–Ω—å, –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ –∞–±–æ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è."""

        instruction = custom_instruction or default_instruction

        return [
            {
                "role": "user",
                "content": f"{instruction}\n\n–¢–µ–∫—Å—Ç:\n{text}\n\n–†–µ–∑—é–º–µ:"
            }
        ]

    def summarize_single(
        self,
        text: str,
        config: str = "balanced",
        custom_instruction: Optional[str] = None,
        stream: bool = False
    ) -> Dict:
        """
        Summarization –æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É

        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è summarization
            config: –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è ('precise', 'balanced', 'creative')
            custom_instruction: –ö–∞—Å—Ç–æ–º–Ω–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è
            stream: Streaming —Ä–µ–∂–∏–º

        Returns:
            –°–ª–æ–≤–Ω–∏–∫ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        """
        cfg = CONFIGS.get(config, CONFIGS["balanced"])
        messages = self.create_chat_messages(text, custom_instruction)

        start_time = time.time()

        try:
            response = self.client.chat.completions.create(
                model=self.model,
                messages=messages,
                temperature=cfg.temperature,
                top_p=cfg.top_p,
                max_tokens=cfg.max_tokens,
                presence_penalty=cfg.presence_penalty,
                frequency_penalty=cfg.frequency_penalty,
                stop=cfg.stop,
                stream=stream,
            )

            if stream:
                # –î–ª—è streaming —Ä–µ–∂–∏–º—É –∑–±–∏—Ä–∞—î–º–æ —Ç–µ–∫—Å—Ç
                summary = ""
                for chunk in response:
                    if chunk.choices[0].delta.content:
                        content = chunk.choices[0].delta.content
                        summary += content
                        print(content, end="", flush=True)
                print()  # –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫ –ø—ñ—Å–ª—è streaming
            else:
                summary = response.choices[0].message.content

            elapsed_time = time.time() - start_time

            return {
                "original_text": text,
                "summary": summary.strip(),
                "config": config,
                "elapsed_time": elapsed_time,
                "finish_reason": response.choices[0].finish_reason if not stream else "stop",
            }

        except Exception as e:
            return {
                "original_text": text,
                "summary": None,
                "error": str(e),
                "config": config,
            }

    def summarize_batch(
        self,
        texts: List[str],
        config: str = "balanced",
        custom_instruction: Optional[str] = None,
        show_progress: bool = True
    ) -> List[Dict]:
        """
        Batch-–æ–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç—ñ–≤ (–ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ —á–µ—Ä–µ–∑ API)

        Args:
            texts: –°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç—ñ–≤
            config: –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
            custom_instruction: –ö–∞—Å—Ç–æ–º–Ω–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è
            show_progress: –ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å

        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        """
        if show_progress:
            print(f"üîÑ –û–±—Ä–æ–±–∫–∞ {len(texts)} —Ç–µ–∫—Å—Ç—ñ–≤ —á–µ—Ä–µ–∑ API...")

        results = []
        start_time = time.time()

        for i, text in enumerate(texts, 1):
            if show_progress:
                print(f"üìù –û–±—Ä–æ–±–∫–∞ {i}/{len(texts)}...", end=" ")

            result = self.summarize_single(
                text=text,
                config=config,
                custom_instruction=custom_instruction,
                stream=False
            )
            results.append(result)

            if show_progress:
                if result.get("error"):
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {result['error']}")
                else:
                    print(f"‚úÖ ({result['elapsed_time']:.2f}s)")

        total_time = time.time() - start_time

        if show_progress:
            successful = sum(1 for r in results if not r.get("error"))
            print(f"\n‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {successful}/{len(texts)} —É—Å–ø—ñ—à–Ω–æ")
            print(f"‚è±Ô∏è  –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å: {total_time:.2f}s")
            print(f"üìä –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –Ω–∞ —Ç–µ–∫—Å—Ç: {total_time/len(texts):.2f}s\n")

        return results

    def check_health(self) -> bool:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤–µ—Ä–∞
        """
        try:
            models = self.client.models.list()
            print(f"‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–Ω–∏–π")
            print(f"üì¶ –î–æ—Å—Ç—É–ø–Ω—ñ –º–æ–¥–µ–ª—ñ: {[m.id for m in models.data]}")
            return True
        except Exception as e:
            print(f"‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: {e}")
            return False


# üìä –ü—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
if __name__ == "__main__":
    # üîå –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞
    client = VLLMSummarizerClient(
        base_url="http://localhost:8000/v1",
        api_key="EMPTY",  # –∑–º—ñ–Ω–∏—Ç–∏ —è–∫—â–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è
    )

    # üè• –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è —Å–µ—Ä–≤–µ—Ä–∞
    print("="*80)
    print("üè• –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞")
    print("="*80 + "\n")

    if not client.check_health():
        print("\n‚ö†Ô∏è  –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è, —â–æ vLLM —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–∏–π!")
        print("–ó–∞–ø—É—Å—Ç–∏: bash start_vllm_server.sh")
        exit(1)

    # print("\n" + "="*80)
    # print("üìù –¢–µ—Å—Ç –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ summarization")
    # print("="*80 + "\n")

    # # –¢–µ—Å—Ç–æ–≤–∏–π —Ç–µ–∫—Å—Ç
    # test_text = """–®—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç (–®–Ü) ‚Äî —Ü–µ –≥–∞–ª—É–∑—å –∫–æ–º–ø'—é—Ç–µ—Ä–Ω–∏—Ö –Ω–∞—É–∫, —è–∫–∞ –∑–∞–π–º–∞—î—Ç—å—Å—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è–º
    # —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–∏—Ö –º–∞—à–∏–Ω, –∑–¥–∞—Ç–Ω–∏—Ö –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è, —â–æ –∑–∞–∑–≤–∏—á–∞–π –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –ª—é–¥—Å—å–∫–æ–≥–æ
    # —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É. –¶–µ –≤–∫–ª—é—á–∞—î —Ç–∞–∫—ñ –∑–¥—ñ–±–Ω–æ—Å—Ç—ñ, —è–∫ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏, –ø—Ä–∏–π–Ω—è—Ç—Ç—è —Ä—ñ—à–µ–Ω—å,
    # –ø–µ—Ä–µ–∫–ª–∞–¥ –º–æ–≤ —Ç–∞ –≤—ñ–∑—É–∞–ª—å–Ω–µ —Å–ø—Ä–∏–π–Ω—è—Ç—Ç—è. –°—É—á–∞—Å–Ω–∏–π –®–Ü –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –º–∞—à–∏–Ω–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è
    # —Ç–∞ –≥–ª–∏–±–æ–∫—ñ –Ω–µ–π—Ä–æ–Ω–Ω—ñ –º–µ—Ä–µ–∂—ñ –¥–ª—è –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –≤—Ä–∞–∂–∞—é—á–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —É —Ä—ñ–∑–Ω–∏—Ö —Å—Ñ–µ—Ä–∞—Ö."""

    # result = client.summarize_single(
    #     text=test_text,
    #     config="balanced"
    # )

    # print(f"üìÑ –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç:\n{test_text}\n")
    # print(f"‚ú® –†–µ–∑—é–º–µ:\n{result['summary']}\n")
    # print(f"‚è±Ô∏è  –ß–∞—Å: {result['elapsed_time']:.2f}s")
    # print(f"üèÅ Finish reason: {result['finish_reason']}\n")

    # –¢–µ—Å—Ç streaming —Ä–µ–∂–∏–º—É
    # print("="*80)
    # print("üåä –¢–µ—Å—Ç streaming —Ä–µ–∂–∏–º—É")
    # print("="*80 + "\n")

    # print("‚ú® –†–µ–∑—é–º–µ (streaming):\n")
    # stream_result = client.summarize_single(
    #     text=test_text,
    #     config="balanced",
    #     stream=True
    # )
    # print()

    # Batch-–æ–±—Ä–æ–±–∫–∞
    print("="*80)
    print("üì¶ –¢–µ—Å—Ç batch-–æ–±—Ä–æ–±–∫–∏")
    print("="*80 + "\n")

    # batch_texts = [
    #     """Python —î –æ–¥–Ω—ñ—î—é –∑ –Ω–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à–∏—Ö –º–æ–≤ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è —É —Å–≤—ñ—Ç—ñ. –í–æ–Ω–∞ –≤—ñ–¥–æ–º–∞ —Å–≤–æ—î—é
    #     –ø—Ä–æ—Å—Ç–æ—Ç–æ—é —Ç–∞ —á–∏—Ç–∞–±–µ–ª—å–Ω—ñ—Å—Ç—é —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É, —â–æ —Ä–æ–±–∏—Ç—å —ó—ó —ñ–¥–µ–∞–ª—å–Ω–æ—é –¥–ª—è –ø–æ—á–∞—Ç–∫—ñ–≤—Ü—ñ–≤.
    #     Python —à–∏—Ä–æ–∫–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ –≤–µ–±-—Ä–æ–∑—Ä–æ–±—Ü—ñ, –Ω–∞—É–∫–æ–≤–æ–º—É –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—ñ, –∞–Ω–∞–ª—ñ–∑—ñ
    #     –¥–∞–Ω–∏—Ö, —à—Ç—É—á–Ω–æ–º—É —ñ–Ω—Ç–µ–ª–µ–∫—Ç—ñ —Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó.""",

    #     """–ë–ª–æ–∫—á–µ–π–Ω ‚Äî —Ü–µ —Ä–æ–∑–ø–æ–¥—ñ–ª–µ–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–∏—Ö, —è–∫–∞ –∑–±–µ—Ä—ñ–≥–∞—î –∑–∞–ø–∏—Å–∏ –ø—Ä–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó —É –≤–∏–≥–ª—è–¥—ñ
    #     –ª–∞–Ω—Ü—é–∂–∫–∞ –±–ª–æ–∫—ñ–≤. –ö–æ–∂–µ–Ω –±–ª–æ–∫ –º—ñ—Å—Ç–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ—ñ—á–Ω–∏–π —Ö–µ—à –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –±–ª–æ–∫—É, —â–æ —Ä–æ–±–∏—Ç—å
    #     —Å–∏—Å—Ç–µ–º—É –Ω–∞–¥–∑–≤–∏—á–∞–π–Ω–æ –∑–∞—Ö–∏—â–µ–Ω–æ—é –≤—ñ–¥ –ø—ñ–¥—Ä–æ–±–∫–∏.""",
    # ]
    # batch_texts = news_headlines
    batch_texts = texts

    prompt = """–¢–∏ ‚Äî –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥–∞—á —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –º–æ–≤–∏.
–¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è ‚Äî –ø–µ—Ä–µ–∫–ª–∞—Å—Ç–∏ –æ—Ç—Ä–∏–º–∞–Ω–∏–π —Ç–µ–∫—Å—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é **—Ç–æ—á–Ω–æ –∑–∞ –∑–º—ñ—Å—Ç–æ–º**, –∞–ª–µ **–ø—Ä–∏—Ä–æ–¥–Ω–æ –π –≤–∏—Ä–∞–∑–Ω–æ –∑–∞ —Ñ–æ—Ä–º–æ—é**, –¥–æ—Ç—Ä–∏–º—É—é—á–∏—Å—å —Ç–∞–∫–∏—Ö –ø—Ä–∞–≤–∏–ª:
1. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π **–≥—Ä–∞–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—É, –ø—Ä–∏—Ä–æ–¥–Ω—É —Ç–∞ —Å—Ç–∏–ª—ñ—Å—Ç–∏—á–Ω–æ –¥–æ—Ä–µ—á–Ω—É** —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –º–æ–≤—É.
2. **–ù–µ –ø–µ—Ä–µ–∫–ª–∞–¥–∞–π –¥–æ—Å–ª—ñ–≤–Ω–æ.** –£–Ω–∏–∫–∞–π –∫–∞–ª—å–æ–∫, —à—Ç—É—á–Ω–∏—Ö –∑–≤–æ—Ä–æ—Ç—ñ–≤ —ñ –±—É–∫–≤–∞–ª—å–Ω–∏—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π ‚Äî –∑–∞–º—ñ–Ω—é–π —ó—Ö –Ω–∞ –ø—Ä–∏—Ä–æ–¥–Ω—ñ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–∫–∏ –∞–±–æ —ñ–¥—ñ–æ–º–∞—Ç–∏—á–Ω—ñ –≤–∏—Ä–∞–∑–∏.
3. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –ª–∞–ø–∫–∏ **¬´...¬ª** –∑–∞–º—ñ—Å—Ç—å —ñ–Ω–æ–∑–µ–º–Ω–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ (‚Äû...‚Äú, "...", ‚Äò...‚Äô —Ç–æ—â–æ), –¥–æ—Ç—Ä–∏–º—É—é—á–∏—Å—å –ø—Ä–∞–≤–∏–ª –ø—É–Ω–∫—Ç—É–∞—Ü—ñ—ó.
4. –ó–∞ –ø–æ—Ç—Ä–µ–±–∏ –∑–∞—Å—Ç–æ—Å–æ–≤—É–π **—Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è Markdown**:
   * –∑–∞–≥–æ–ª–æ–≤–∫–∏ (`#`, `##`),
   * —Å–ø–∏—Å–∫–∏,
   * **–∂–∏—Ä–Ω–∏–π** –∞–±–æ *–∫—É—Ä—Å–∏–≤–Ω–∏–π* —Ç–µ–∫—Å—Ç,
   * —Ü–∏—Ç–∞—Ç–∏ —Ç–æ—â–æ.
5. –ù–µ –¥–æ–¥–∞–≤–∞–π –ø–æ—è—Å–Ω–µ–Ω—å, –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤, –ø—Ä–∏–º—ñ—Ç–æ–∫ —á–∏ —Å–ª—É–∂–±–æ–≤–∏—Ö —Ñ—Ä–∞–∑.
6. –Ø–∫—â–æ –Ω–∞–¥–∞–Ω–æ —Ç–µ–∫—Å—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é, –∞–±–æ —Ä–æ—Å—ñ–π—Å—å–∫–æ—é –º–æ–≤–æ—é, —Ç–æ –ø–µ—Ä–µ–∫–ª–∞–¥–∞—Ç–∏ –π–æ–≥–æ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ. –í —Ç–∞–∫–æ–º—É —Ä–∞–∑—ñ –ø—Ä–æ—Å—Ç–æ –≤–∏–≤–µ–¥–∏ –ø—É—Å—Ç–∏–π —Ä—è–¥–æ–∫.
7. **–£ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø–æ–¥–∞–≤–∞–π –ª–∏—à–µ –ø–µ—Ä–µ–∫–ª–∞–¥–µ–Ω–∏–π —Ç–µ–∫—Å—Ç.**"""

    sample_texts = texts
    iteration_count = 1
    for i in range(iteration_count):
        print(f"ü´ß Iteration {i+1}/{iteration_count}\n{'*'*50}")
        start_time = time.time()

        batch_results = client.summarize_batch(
            texts=batch_texts,
            config="balanced",
            show_progress=True
            # custom_instruction=prompt
        )
        end_time = time.time()

        # –í–∏–≤–µ–¥–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ batch
        for i, result in enumerate(batch_results, 1):
            print(f"üìÑ –¢–µ–∫—Å—Ç #{i}:")
            print(f"‚ú® –†–µ–∑—é–º–µ: {result['summary']}\n")
            print(f"‚ú≥Ô∏è –ü—Ä–∏—á–∏–Ω–∞ –∑—É–ø–∏–Ω–∫–∏:")
            print(f"{result['finish_reason']}\n")
        print(f"‚è±Ô∏è –í—ñ–¥–ø–æ–≤—ñ–¥—å –∑–∞–π–Ω—è–ª–∞ {end_time - start_time:.4f} —Å–µ–∫—É–Ω–¥\n")

    # –¢–µ—Å—Ç —Ä—ñ–∑–Ω–∏—Ö –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π
    # print("="*80)
    # print("üéØ –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ä—ñ–∑–Ω–∏—Ö –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π")
    # print("="*80 + "\n")

    # for config_name in ["precise", "balanced", "creative"]:
    #     print(f"--- –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è: {config_name.upper()} ---")
    #     result = client.summarize_single(
    #         text=test_text,
    #         config=config_name
    #     )
    #     print(f"‚ú® {result['summary']}\n")

    # # –ö–∞—Å—Ç–æ–º–Ω–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è
    # print("="*80)
    # print("üé® –¢–µ—Å—Ç –∑ –∫–∞—Å—Ç–æ–º–Ω–æ—é —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—î—é")
    # print("="*80 + "\n")

    # custom_result = client.summarize_single(
    #     text=test_text,
    #     config="balanced",
    #     custom_instruction="–°—Ç–≤–æ—Ä–∏ —Ä–µ–∑—é–º–µ —É —Ñ–æ—Ä–º–∞—Ç—ñ: '–ì–æ–ª–æ–≤–Ω–∞ —ñ–¥–µ—è: ... –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è: ...'"
    # )

    # print(f"‚ú® –ö–∞—Å—Ç–æ–º–Ω–µ —Ä–µ–∑—é–º–µ:\n{custom_result['summary']}")
