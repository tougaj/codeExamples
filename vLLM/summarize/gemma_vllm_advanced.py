"""
–í–∞—Ä—ñ–∞–Ω—Ç B: –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –æ–∫—Ä–µ–º–æ–≥–æ HuggingFace —Ç–æ–∫–µ–Ω–∞–π–∑–µ—Ä–∞
–ë—ñ–ª—å—à–µ –∫–æ–Ω—Ç—Ä–æ–ª—é —Ç–∞ –≥–Ω—É—á–∫–æ—Å—Ç—ñ, –∫–æ—Ä–∏—Å–Ω–æ –¥–ª—è –∫–∞—Å—Ç–æ–º—ñ–∑–∞—Ü—ñ—ó
"""

import time
from typing import Dict, List

from transformers import AutoTokenizer
from vllm import LLM, SamplingParams

from common import texts

# üîß –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥–µ–ª—ñ
# MODEL_NAME = "google/gemma-3-4b-it"
MODEL_NAME = "google/gemma-3-12b-it"

llm = LLM(
    model=MODEL_NAME,
    trust_remote_code=True,
    max_model_len=1024,
    # max_model_len=8192,
    gpu_memory_utilization=0.95,
    tensor_parallel_size=1,  # –¥–ª—è –º—É–ª—å—Ç–∏-GPU –∑–±—ñ–ª—å—à —Ü–µ –∑–Ω–∞—á–µ–Ω–Ω—è
)

# üìù –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞–π–∑–µ—Ä–∞ –∑ HuggingFace –æ–∫—Ä–µ–º–æ
tokenizer = AutoTokenizer.from_pretrained(
    MODEL_NAME,
    trust_remote_code=True,
)

# ‚öôÔ∏è –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ summarization
SUMMARIZATION_CONFIGS = {
    "precise": SamplingParams(
        temperature=0.2,  # –¥—É–∂–µ –¥–µ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω–æ
        top_p=0.85,
        max_tokens=400,
        presence_penalty=0.6,
        frequency_penalty=0.4,
        stop=["</summary>", "\n\n\n", "–¢–µ–∫—Å—Ç:"],
    ),
    "balanced": SamplingParams(
        temperature=0.5,  # –±–∞–ª–∞–Ω—Å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Ç–∞ —Ç–æ—á–Ω–æ—Å—Ç—ñ
        top_p=0.9,
        max_tokens=600,
        presence_penalty=0.5,
        frequency_penalty=0.3,
        stop=["</summary>", "\n\n\n"],
    ),
    "creative": SamplingParams(
        temperature=0.8,  # –±—ñ–ª—å—à –∫—Ä–µ–∞—Ç–∏–≤–Ω—ñ —Ä–µ–∑—é–º–µ
        top_p=0.95,
        max_tokens=800,
        presence_penalty=0.3,
        frequency_penalty=0.2,
        stop=["</summary>", "\n\n\n"],
    ),
}


class GemmaSummarizer:
    """
    –ö–ª–∞—Å –¥–ª—è –∑—Ä—É—á–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ –∑ summarization —á–µ—Ä–µ–∑ vLLM
    """

    def __init__(self, llm_instance, tokenizer_instance):
        self.llm = llm_instance
        self.tokenizer = tokenizer_instance

    def create_chat_messages(self, text: str, custom_instruction: str = None) -> List[Dict]:
        """
        –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è chat template
        """
        # default_instruction = """–°—Ç–≤–æ—Ä–∏ —Å—Ç–∏—Å–ª–µ —Ä–µ–∑—é–º–µ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.
# –†–µ–∑—é–º–µ –º–∞—î –±—É—Ç–∏ —á—ñ—Ç–∫–∏–º, —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∏–º —Ç–∞ –Ω–µ –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 3-4 —Ä–µ—á–µ–Ω–Ω—è."""
        default_instruction = """–¢–∏ ‚Äî —Å–∏—Å—Ç–µ–º–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–∏—Å–ª–∏—Ö –Ω–æ–≤–∏–Ω–Ω–∏—Ö —Ä–µ–∑—é–º–µ.
–û—Ç—Ä–∏–º—É—î—à —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—Ç—ñ –∑ –Ω–æ–≤–∏–Ω–Ω–æ–≥–æ –¥–∂–µ—Ä–µ–ª–∞ –±—É–¥—å-—è–∫–æ—é –º–æ–≤–æ—é.
–¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è ‚Äî –ø—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ –∫–æ—Ä–æ—Ç–∫–µ —Ä–µ–∑—é–º–µ **—É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é** (3‚Äì5 —Ä–µ—á–µ–Ω—å), –¥–æ—Ç—Ä–∏–º—É—é—á–∏—Å—å —Ç–∞–∫–∏—Ö –ø—Ä–∞–≤–∏–ª:
1. **–ü–µ—Ä–µ–¥–∞–π –≥–æ–ª–æ–≤–Ω–∏–π –∑–º—ñ—Å—Ç —Ç–æ—á–Ω–æ –π —Å—Ç–∏—Å–ª–æ** ‚Äî –∑–æ—Å–µ—Ä–µ–¥—å—Å—è –Ω–∞ –∫–ª—é—á–æ–≤–∏—Ö —Ñ–∞–∫—Ç–∞—Ö, –ø–æ–¥—ñ—è—Ö —ñ —Ç–µ–∑–∞—Ö.
2. –Ø–∫—â–æ –≤ —Ç–µ–∫—Å—Ç—ñ —î —Ü—ñ –¥–∞–Ω—ñ, **–∑–∞–∑–Ω–∞—á –æ—Å–Ω–æ–≤–Ω–∏—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤, –º—ñ—Å—Ü–µ, —á–∞—Å —ñ –ø—Ä–∏—á–∏–Ω—É –ø–æ–¥—ñ—ó.**
3. **–£–Ω–∏–∫–∞–π** –¥—Ä—É–≥–æ—Ä—è–¥–Ω–∏—Ö –¥–µ—Ç–∞–ª–µ–π, –ø—Ä–∏–∫–ª–∞–¥—ñ–≤, —Ü–∏—Ç–∞—Ç, –æ—Ü—ñ–Ω–Ω–∏—Ö —Å—É–¥–∂–µ–Ω—å —ñ –µ–º–æ—Ü—ñ–π–Ω–æ–≥–æ —Ç–æ–Ω—É.
4. –î–æ—Ç—Ä–∏–º—É–π—Å—è **–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–≥–æ, –æ–±‚Äô—î–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–∏–ª—é.**
5. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π **–ø—Ä–∏—Ä–æ–¥–Ω—É, –∑—Ä–æ–∑—É–º—ñ–ª—É –π –≥—Ä–∞–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—É** —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –º–æ–≤—É.
6. **–£ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø–æ–¥–∞–π –ª–∏—à–µ —Ä–µ–∑—é–º–µ** ‚Äî –±–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤, –ø–æ—è—Å–Ω–µ–Ω—å, –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ –∞–±–æ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è."""

        instruction = custom_instruction or default_instruction

        messages = [
            {
                "role": "user",
                "content": f"{instruction}\n\n–¢–µ–∫—Å—Ç:\n{text}\n\n–†–µ–∑—é–º–µ:"
            }
        ]

        return messages

    def apply_chat_template(self, messages: List[Dict]) -> str:
        """
        –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è chat template —á–µ—Ä–µ–∑ HF —Ç–æ–∫–µ–Ω–∞–π–∑–µ—Ä
        """
        # üéØ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è apply_chat_template –∑ —Ç–æ–∫–µ–Ω–∞–π–∑–µ—Ä–∞
        prompt = self.tokenizer.apply_chat_template(
            messages,
            tokenize=False,  # –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ string
            add_generation_prompt=True,  # –¥–æ–¥–∞—î–º–æ generation prompt
        )

        return prompt

    def summarize_batch(
        self,
        texts: List[str],
        config: str = "balanced",
        custom_instruction: str = None,
        show_progress: bool = True
    ) -> List[Dict]:
        """
        Batch-–æ–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç—ñ–≤ –∑ –¥–µ—Ç–∞–ª—å–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é

        Args:
            texts: –°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç—ñ–≤
            config: –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è ('precise', 'balanced', 'creative')
            custom_instruction: –ö–∞—Å—Ç–æ–º–Ω–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –¥–ª—è –º–æ–¥–µ–ª—ñ
            show_progress: –ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å

        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        """
        if show_progress:
            print(f"üîÑ –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ {len(texts)} —Ç–µ–∫—Å—Ç—ñ–≤...")

        start_time = time.time()

        # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–º–ø—Ç—ñ–≤
        prompts = []
        for text in texts:
            messages = self.create_chat_messages(text, custom_instruction)
            prompt = self.apply_chat_template(messages)
            prompts.append(prompt)

        # –í–∏–±—ñ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        sampling_params = SUMMARIZATION_CONFIGS.get(config, SUMMARIZATION_CONFIGS["balanced"])

        if show_progress:
            print(f"üöÄ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ–∑—é–º–µ (config: {config})...")

        # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è
        outputs = self.llm.generate(prompts, sampling_params)

        # –û–±—Ä–æ–±–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        results = []
        for i, output in enumerate(outputs):
            result = {
                "original_text": texts[i],
                "summary": output.outputs[0].text.strip(),
                "tokens_generated": len(output.outputs[0].token_ids),
                "finish_reason": output.outputs[0].finish_reason,
            }
            results.append(result)

        elapsed_time = time.time() - start_time

        if show_progress:
            print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {elapsed_time:.2f}s")
            print(f"üìä –®–≤–∏–¥–∫—ñ—Å—Ç—å: {len(texts)/elapsed_time:.2f} —Ç–µ–∫—Å—Ç—ñ–≤/—Å\n")

        return results


# üìä –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
if __name__ == "__main__":
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è summarizer
    summarizer = GemmaSummarizer(llm, tokenizer)

    # –¢–µ—Å—Ç–æ–≤—ñ —Ç–µ–∫—Å—Ç–∏
    # sample_texts = [
    #     """–ö–≤–∞–Ω—Ç–æ–≤—ñ –∫–æ–º–ø'—é—Ç–µ—Ä–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø–∏ –∫–≤–∞–Ω—Ç–æ–≤–æ—ó –º–µ—Ö–∞–Ω—ñ–∫–∏ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó.
    #     –ù–∞ –≤—ñ–¥–º—ñ–Ω—É –≤—ñ–¥ –∫–ª–∞—Å–∏—á–Ω–∏—Ö –∫–æ–º–ø'—é—Ç–µ—Ä—ñ–≤, —è–∫—ñ –ø—Ä–∞—Ü—é—é—Ç—å –∑ –±—ñ—Ç–∞–º–∏ (0 –∞–±–æ 1), –∫–≤–∞–Ω—Ç–æ–≤—ñ
    #     –∫–æ–º–ø'—é—Ç–µ—Ä–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å –∫—É–±—ñ—Ç–∏, —è–∫—ñ –º–æ–∂—É—Ç—å –ø–µ—Ä–µ–±—É–≤–∞—Ç–∏ –≤ —Å—É–ø–µ—Ä–ø–æ–∑–∏—Ü—ñ—ó —Å—Ç–∞–Ω—ñ–≤.
    #     –¶–µ –¥–æ–∑–≤–æ–ª—è—î —ó–º –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –ø–µ–≤–Ω—ñ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –µ–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–π–Ω–æ —à–≤–∏–¥—à–µ –∑–∞ –∫–ª–∞—Å–∏—á–Ω—ñ —Å–∏—Å—Ç–µ–º–∏.
    #     –ö–≤–∞–Ω—Ç–æ–≤—ñ –∫–æ–º–ø'—é—Ç–µ—Ä–∏ –º–∞—é—Ç—å –ø–æ—Ç–µ–Ω—Ü—ñ–∞–ª —Ä–µ–≤–æ–ª—é—Ü—ñ–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ—ñ—é, –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é —Ç–∞
    #     —Å–∏–º—É–ª—è—Ü—ñ—é –º–æ–ª–µ–∫—É–ª—è—Ä–Ω–∏—Ö —Å–∏—Å—Ç–µ–º.""",

    #     """–ë–ª–æ–∫—á–µ–π–Ω ‚Äî —Ü–µ —Ä–æ–∑–ø–æ–¥—ñ–ª–µ–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–∏—Ö, —è–∫–∞ –∑–±–µ—Ä—ñ–≥–∞—î –∑–∞–ø–∏—Å–∏ –ø—Ä–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó —É –≤–∏–≥–ª—è–¥—ñ
    #     –ª–∞–Ω—Ü—é–∂–∫–∞ –±–ª–æ–∫—ñ–≤. –ö–æ–∂–µ–Ω –±–ª–æ–∫ –º—ñ—Å—Ç–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ—ñ—á–Ω–∏–π —Ö–µ—à –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –±–ª–æ–∫—É, —â–æ —Ä–æ–±–∏—Ç—å
    #     —Å–∏—Å—Ç–µ–º—É –Ω–∞–¥–∑–≤–∏—á–∞–π–Ω–æ –∑–∞—Ö–∏—â–µ–Ω–æ—é –≤—ñ–¥ –ø—ñ–¥—Ä–æ–±–∫–∏. –¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—è –±–ª–æ–∫—á–µ–π–Ω –ª–µ–∂–∏—Ç—å –≤ –æ—Å–Ω–æ–≤—ñ
    #     –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç, –∞–ª–µ —ó—ó –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –Ω–∞–±–∞–≥–∞—Ç–æ —à–∏—Ä—à–µ: –≤—ñ–¥ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ–≤ –¥–æ —Å–∏—Å—Ç–µ–º
    #     —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ª–∞–Ω—Ü—é–≥–∞–º–∏ –ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è.""",

    #     """–ú–∞—à–∏–Ω–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è ‚Äî —Ü–µ –ø—ñ–¥–≥–∞–ª—É–∑—å —à—Ç—É—á–Ω–æ–≥–æ —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É, —è–∫–∞ –¥–æ–∑–≤–æ–ª—è—î —Å–∏—Å—Ç–µ–º–∞–º
    #     –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–æ–∫—Ä–∞—â—É–≤–∞—Ç–∏ —Å–≤–æ—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —á–µ—Ä–µ–∑ –¥–æ—Å–≤—ñ–¥. –ó–∞–º—ñ—Å—Ç—å —è–≤–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è
    #     –ø—Ä–∞–≤–∏–ª, –∞–ª–≥–æ—Ä–∏—Ç–º–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –Ω–∞–≤—á–∞–Ω–Ω—è –≤–∏—è–≤–ª—è—é—Ç—å –ø–∞—Ç–µ—Ä–Ω–∏ –≤ –¥–∞–Ω–∏—Ö. –Ü—Å–Ω—É—î —Ç—Ä–∏ –æ—Å–Ω–æ–≤–Ω—ñ
    #     —Ç–∏–ø–∏: –Ω–∞–≤—á–∞–Ω–Ω—è –∑ —É—á–∏—Ç–µ–ª–µ–º, –±–µ–∑ —É—á–∏—Ç–µ–ª—è —Ç–∞ –∑ –ø—ñ–¥–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è–º.""",
    # ]
    sample_texts = texts

    # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ä—ñ–∑–Ω–∏—Ö –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π
    for config_name in ["precise", "balanced", "creative"]:
        print(f"\n{'='*80}")
        print(f"üéØ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {config_name.upper()}")
        print(f"{'='*80}\n")

        results = summarizer.summarize_batch(
            texts=sample_texts,
            config=config_name,
            show_progress=True
        )

        # –í–∏–≤–µ–¥–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        for i, result in enumerate(results, 1):
            print(f"üìÑ –¢–µ–∫—Å—Ç #{i} ({result['tokens_generated']} —Ç–æ–∫–µ–Ω—ñ–≤):")
            print(f"‚ú® –†–µ–∑—é–º–µ: {result['summary']}")
            print(f"üèÅ Finish reason: {result['finish_reason']}\n")

    # –ü—Ä–∏–∫–ª–∞–¥ –∑ –∫–∞—Å—Ç–æ–º–Ω–æ—é —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—î—é
    print(f"\n{'='*80}")
    print(f"üé® –¢–µ—Å—Ç –∑ –∫–∞—Å—Ç–æ–º–Ω–æ—é —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—î—é")
    print(f"{'='*80}\n")

    custom_results = summarizer.summarize_batch(
        texts=[sample_texts[0]],
        config="balanced",
        custom_instruction="–°—Ç–≤–æ—Ä–∏ —Ä–µ–∑—é–º–µ —Ü—å–æ–≥–æ —Ç–µ–∫—Å—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ: '–ö–ª—é—á–æ–≤–∞ —ñ–¥–µ—è: ... –ü—Ä–∞–∫—Ç–∏—á–Ω–µ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è: ...'",
        show_progress=True
    )

    print(f"‚ú® –ö–∞—Å—Ç–æ–º–Ω–µ —Ä–µ–∑—é–º–µ:\n{custom_results[0]['summary']}")
