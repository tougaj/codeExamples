#!/usr/bin/env python3

import time
from argparse import ArgumentParser
from pathlib import Path

from deepface import DeepFace
from PIL import Image


def create_errors_dir(path: Path):
    """
    The function `create_errors_dir` checks if a directory named ERROR_DIR exists
    and creates it if it does not.
    """
    if not path.exists():
        path.mkdir(parents=True, exist_ok=True)


def crop_face(img_path: Path, face_data: str, output_path: Path, min_size: int):
    """
    –í–∏—Ä—ñ–∑–∞—î –æ–±–ª–∏—á—á—è –∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —ñ –∑–±–µ—Ä—ñ–≥–∞—î –π–æ–≥–æ –≤ –æ–∫—Ä–µ–º–∏–π —Ñ–∞–π–ª.

    :param img_path: –®–ª—è—Ö –¥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.
    :param face_data: –°–ª–æ–≤–Ω–∏–∫ –∑ –¥–∞–Ω–∏–º–∏ –ø—Ä–æ –æ–±–ª–∏—á—á—è.
    :param output_path: –®–ª—è—Ö –¥–æ –≤–∏—Ö—ñ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É.
    """
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    image = Image.open(img_path)

    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –æ–±–ª–∏—á—á—è
    x = face_data['x']
    y = face_data['y']
    w = face_data['w']
    h = face_data['h']
    if max(w, h) < min_size:
        print(f'‚ö†Ô∏è  Face is to small {w}x{h}')
        return

    # –û–±—á–∏—Å–ª–µ–Ω–Ω—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –≤–∏—Ä—ñ–∑–∞–Ω–Ω—è
    left = x
    top = y
    right = x + w
    bottom = y + h

    # –í–∏—Ä—ñ–∑–∞–Ω–Ω—è –æ–±–ª–∏—á—á—è
    face_image = image.crop((left, top, right, bottom))

    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∏—Ä—ñ–∑–∞–Ω–æ–≥–æ –æ–±–ª–∏—á—á—è
    try:
        face_image.save(output_path)
    except Exception as e:
        print(f'‚ö†Ô∏è  Error saving to {output_path}: {e}')


if __name__ == '__main__':
    parser = ArgumentParser()
    parser.add_argument("-z", "--size", type=int,
                        default=50, help="Image min size")
    parser.add_argument("-s", "--source", type=str,
                        default='./images', help="Images source directory")
    parser.add_argument("-d", "--destination", type=str,
                        default='./faces', help="Faces destination directory")
    parser.add_argument("-e", "--errors", type=str,
                        default='./errors', help="Errors directory")
    args = parser.parse_args()
    MIN_SIZE = args.size
    SOURCE_DIRECTORY = Path(args.source)
    DESTINATION_DIR = Path(args.destination)
    ERROR_DIR = Path(args.errors)

    create_errors_dir(ERROR_DIR)
    start_time = time.time()
    counter = 0
    file_list = [file for file in SOURCE_DIRECTORY.iterdir()
                 if file.is_file()]
    list_len = len(file_list)
    errors_count = 0
    for file_path in file_list:
        if counter % 20 == 0:
            print(f'Processing {counter+1} from {list_len}')
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ñ–∞–π–ª –º–∞—î —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è .jpg
        # if filename.lower().endswith('.jpg'):
        # file_path = SOURCE_DIRECTORY / input_file_name
        base_name = file_path.stem
        extension = file_path.suffix
        # (not_used, extension) = os.path.splitext(file_path)
        # print(f'Found JPG file: {file_path}')

        face_objs = None
        try:
            face_objs = DeepFace.extract_faces(
                img_path=file_path,
                detector_backend='centerface',
                align=True,
            )
        except Exception as e:
            errors_count += 1
            file_name = f'{base_name}{extension}'
            file_path.rename(ERROR_DIR / f'{file_name}')
            print(f'‚ö†Ô∏è  No faces detected in {file_name}. Moved to errors')
        face_no = 0
        if face_objs:
            for face in face_objs:
                out_path = DESTINATION_DIR / \
                    f'{base_name}_{face_no}{extension}'
                crop_face(
                    img_path=file_path,
                    face_data=face['facial_area'],
                    output_path=out_path,
                    min_size=MIN_SIZE
                )
                # print(face['facial_area'])
                face_no += 1
        counter += 1

    end_time = time.time()
    elapsed_time = end_time - start_time
    print(
        f"üèÅ Elapsed time: {elapsed_time:.4f} seconds with {errors_count} error")
